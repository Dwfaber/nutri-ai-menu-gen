
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.CUSTOM_SUPABASE_URL || "https://wzbhhioegxdpegirglbq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.CUSTOM_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind6YmhoaW9lZ3hkcGVnaXJnbGJxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI1MDA0MDUsImV4cCI6MjA2ODA3NjQwNX0.ufwv_XD8LZ2SGMPYUy7Z-CkK2GRNx8mailJb6ZRZHXQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Configurar timeout global mais robusto
const originalFrom = supabase.from;
supabase.from = function(relation: string) {
  const query = originalFrom.call(this, relation);
  
  // Adicionar timeout padrÃ£o de 30 segundos
  const originalSelect = query.select;
  query.select = function(...args: any[]) {
    const selectQuery = originalSelect.apply(this, args);
    
    // Wrapper para adicionar timeout
    const originalThen = selectQuery.then;
    selectQuery.then = function(onfulfilled?: any, onrejected?: any) {
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Request timeout')), 30000);
      });
      
      const racePromise = Promise.race([
        originalThen.call(this, onfulfilled, onrejected),
        timeoutPromise
      ]);
      
      return racePromise;
    };
    
    return selectQuery;
  };
  
  return query;
};
